
generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url = env("NUXT_API_SECRET_PATH")
  // directUrl         = env("NUXT_DIRECT_URL")
}

model Category {
  id           Int                  @id @default(autoincrement())
  group        String               @unique
  visible      Boolean
  categoryImg String
  parentId     Int?                 // ID родительской категории (null для корневых категорий)
  parent       Category?            @relation("CategoryParent", fields: [parentId], references: [id], onDelete: Cascade) // Связь с родительской категорией
  subcategories Category[]          @relation("CategoryParent") // Связь с подкатегориями
  translations CategoryTranslation[]
  products     Product[]
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  categoryId  Int      // Поле внешнего ключа
  language    String   // Язык перевода (например, "en", "ru", "uk")
  title       String   // Переведенное название категории
  description String?  // Переведенное описание категории
  Category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Product {
  id                 Int                  @id @default(autoincrement())
  categoryId         Int                  // Поле внешнего ключа для связи с Category
  // title              String               // Основное название товара
  visible            Boolean              // Показывать товар на сайте
  img                ProductImg[]              // Строка изображения
  price              Float?              // Стандартная цена
  stockState         Boolean              // Показывать колличество товарв на сайте 
  stockValue         Int?                 @default(0) // Значение колличества товаров на сайте
  discountPercent    Int?                // Цена акционного товара
  wholesalePrice     Int?                  // Оптовая цена
  // wholesaleInfo      String?               // информация об оптовой продажи товара
  counterQuantity    Int?                  @default(1)// Значение минимального колличества единиц
  packageType        String                // Значение типа упаковки
  wholesaleOnly      Boolean?               // Значение продажи товара только оптом
  options            ProductOptions[]       // Массив опций
  translations       ProductTranslation[] // Связь с переводами
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ProductOptions {
  id                Int     @id @default(autoincrement())
  optionId          Int
  optionImg         String
  // optionDescription String
  optionPrice       Float?
  // optionWholesale   Float?
  // wholesaleOnly     Boolean
  translations      ProductOptionsTranslation[]
  Product           Product @relation(fields: [optionId], references: [id], onDelete: Cascade)


}

model ProductImg {
  id                Int     @id @default(autoincrement())
  imgId             Int
  path              String
  Product           Product @relation(fields: [imgId], references: [id], onDelete: Cascade)
}

model ProductTranslation {
  id                 Int      @id @default(autoincrement())
  productId          Int      // Поле внешнего ключа
  language           String   // Язык перевода (например, "en", "ru", "uk")
  title              String   // Переведенное название товара
  productDescription String?  // Переведенное описание товара
  wholesaleDescription String? // Переведенное оптовое описание
  Product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductOptionsTranslation {
  id                 Int      @id @default(autoincrement())
  optionId           Int
  language           String
  optionInfo         String
  Option             ProductOptions @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  visible   Boolean
  createdAt DateTime @default(now())
}
